@page "/fetchuserdetails"
@using BlazorApp.Shared.Models
@inject HttpClient Http
<h1>Customer Data</h1>
<p>Blazor CRUD operation</p>
<div class="row">
    <div class="col-md-6">
        <a href='/user/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Customer
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterCustomer" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (customerList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>UserName</th>
                <th>Email</th>
                <th>Age</th>
                <th>Date Of Birth No</th>
              
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerList)
            {
                <tr>
                    <td>@customer.CustomerID</td>
                    <td>@customer.UserName</td>
                    <td>@customer.Age</td>
                    <td>@customer.Email</td>
                    <td>@customer.DateOfBirth</td>
                    <td>
                        <a href='/user/edit/@customer.CustomerId' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/user/delete/@customer.CustomerId' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    protected List<Customer> customerList = new();
    protected List<Customer> searchUserData = new();
    protected Customer customer = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }
    protected async Task GetUser()
    {
        userList = await Http.GetFromJsonAsync<List<User>>("api/User");
        searchCustomerData = customerList;
    }
    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            customerList = searchCustomerData
                .Where(x => x.Username.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            customerList = searchCustomerData;
        }
    }
    protected void DeleteConfirm(int userID)
    {
        user = customerList.FirstOrDefault(x => x.Customerid == userID);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        customerist = Data;
    }
}